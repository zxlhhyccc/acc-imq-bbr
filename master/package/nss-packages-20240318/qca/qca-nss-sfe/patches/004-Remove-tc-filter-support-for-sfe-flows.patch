--- a/sfe.c
+++ b/sfe.c
@@ -43,7 +43,6 @@
 
 extern int max_ipv4_conn;
 extern int max_ipv6_conn;
-extern bool fast_tc_filter;
 
 #define SFE_MESSAGE_VERSION 0x1
 #define sfe_ipv6_addr_copy(src, dest) memcpy((void *)(dest), (void *)(src), 16)
@@ -2061,14 +2060,6 @@ int sfe_recv(struct sk_buff *skb)
 	l2_info.parse_flags = 0;
 	l2_info.vlan_hdr_cnt = 0;
 
-	/*
-	 * If TC filter processing is enabled skip tc_classify check as:
-	 * - for IFB case it taken care by netif_recv_skb
-	 * - for simple filters on ingress tc_skip_classify would never be
-	 *   set and hence this check should be skipped.
-	 *
-	 */
-	if (likely(!fast_tc_filter)) {
 #ifdef CONFIG_NET_CLS_ACT
 		/*
 		 * If ingress Qdisc configured, and packet not processed by ingress Qdisc yet
@@ -2084,22 +2075,6 @@ int sfe_recv(struct sk_buff *skb)
 		}
 #endif
 #endif
-	} else {
-		/*
-		 * Update Vlan l2 info by parsing vlan netdev
-		 */
-		if (unlikely(!sfe_vlan_dev_check_and_parse_tag(skb, &l2_info))){
-			return 0;
-		}
-
-		/*
-		 * If skb vlan tag is present it needs to go through undo if match fails
-		 * and hence we let the processing go l2 parse below.
-		 */
-		if ((sfe_l2_parse_flag_check(&l2_info, SFE_L2_PARSE_FLAGS_VLAN_HW_TAG_SET))) {
-			goto sfe_l2_parse;
-		}
-	}
 
 	/*
 	 * If l2_feature is enabled, we need not check if src dev is L3 interface since bridge flow offload is supported.
@@ -2130,7 +2105,6 @@ int sfe_recv(struct sk_buff *skb)
 		break;
 	}
 
-sfe_l2_parse:
 	/*
 	 * Stop L2 processing if L2 feature is disabled.
 	 */
@@ -2170,8 +2144,7 @@ sfe_l2_parse:
 
 	DEBUG_TRACE("Non-IP(%x) %s skb=%px skb_vlan:%x/%x/%x skb_proto=%x\n",
 			l2_info.protocol, dev->name, skb,
-			ntohs(skb->vlan_proto), skb->vlan_tci, skb_vlan_tag_present(skb) ? 1 : \
-			(sfe_l2_parse_flag_check(&l2_info, SFE_L2_PARSE_FLAGS_VLAN_HW_TAG_SET)),
+			ntohs(skb->vlan_proto), skb->vlan_tci, skb_vlan_tag_present(skb),
 			htons(skb->protocol));
 
 send_to_linux:
@@ -2254,65 +2227,6 @@ bool sfe_is_l2_feature_enabled()
 EXPORT_SYMBOL(sfe_is_l2_feature_enabled);
 
 /*
- * sfe_get_fast_tc_filter()
- *	fast_tc feature is enabled/disabled
- */
-ssize_t sfe_get_fast_tc_filter(struct device *dev,
-				     struct device_attribute *attr,
-				     char *buf)
-{
-	ssize_t len;
-
-	len = snprintf(buf, (ssize_t)(PAGE_SIZE), "fast tc filter feature is %s\n", fast_tc_filter ? "enabled" : "disabled");
-	return len;
-}
-
-/*
- * sfe_set_fast_tc_filter()
- *	Enable or disable fast tc filter feature.
- */
-ssize_t sfe_set_fast_tc_filter(struct device *dev, struct device_attribute *attr,
-			 const char *buf, size_t count)
-{
-	unsigned long val;
-	int ret;
-	ret = sscanf(buf, "%lu", &val);
-
-	if (ret != 1) {
-		pr_err("Wrong input, %s\n", buf);
-		return -EINVAL;
-	}
-
-	if (val != 1 && val != 0) {
-		pr_err("Input should be either 1 or 0, (%s)\n", buf);
-		return -EINVAL;
-	}
-
-
-	if (fast_tc_filter == true && val) {
-		pr_err("fast tc filter feature is already enabled\n");
-		return -EINVAL;
-	}
-
-	if (fast_tc_filter == false && !val) {
-		pr_err("fast tc filter feature is already disabled\n");
-		return -EINVAL;
-	}
-
-
-	if (val) {
-		fast_tc_filter = true;
-	} else {
-		fast_tc_filter = false;
-	}
-
-	return count;
-}
-
-static const struct device_attribute fast_tc_filter_attr =
-	__ATTR(fast_tc_filter,  0644, sfe_get_fast_tc_filter, sfe_set_fast_tc_filter);
-
-/*
  * sfe_get_l2_feature()
  *	L2 feature is enabled/disabled
  */
@@ -2559,15 +2473,6 @@ int sfe_init_if(void)
 		goto exit2;
 	}
 
-	/*
-	 * Create sys/sfe/fast_tc_filter
-	 */
-	result = sysfs_create_file(sfe_ctx->sys_sfe, &fast_tc_filter_attr.attr);
-	if (result) {
-		DEBUG_ERROR("failed to register tc filter enable feature flag sysfs file: %d\n", result);
-		goto exit2;
-	}
-
 	/*
 	 * Create sys/sfe/l2_feature
 	 */
--- a/sfe.h
+++ b/sfe.h
@@ -41,7 +41,6 @@
 
 #define SFE_L2_PARSE_FLAGS_PPPOE_INGRESS 0x01		/* Indicates presence of a valid PPPoE header */
 #define SFE_L2_PARSE_FLAGS_VLAN_HW_TAG_SET 0x04		/* Indicates presence of a skb tag set by linux */
-#define SFE_L2_PARSE_FLAGS_VLAN_LINUX_UNTAGGED 0x08	/* Indicates vlan dev in skb set by linunx */
 
 /*
  * IPv6 address structure
--- a/sfe_vlan.h
+++ b/sfe_vlan.h
@@ -129,16 +129,7 @@ static inline bool sfe_vlan_check_and_pa
 static inline void sfe_vlan_undo_parse(struct sk_buff *skb, struct sfe_l2_info *l2_info)
 {
 
-	if ((l2_info->vlan_hdr_cnt == 0)) {
-		return;
-	}
-
-	if ((sfe_l2_parse_flag_check(l2_info, SFE_L2_PARSE_FLAGS_VLAN_HW_TAG_SET))) {
-		skb->vlan_present = 1;
-		return;
-	}
-
-	if ((sfe_l2_parse_flag_check(l2_info, SFE_L2_PARSE_FLAGS_VLAN_LINUX_UNTAGGED))) {
+	if (l2_info->vlan_hdr_cnt == 0) {
 		return;
 	}
 
@@ -146,54 +137,6 @@ static inline void sfe_vlan_undo_parse(s
 	__skb_push(skb, l2_info->vlan_hdr_cnt * VLAN_HLEN);
 }
 
-static inline bool sfe_vlan_dev_check_and_parse_tag(struct sk_buff *skb, struct sfe_l2_info *l2_info)
-{
-	struct net_device *vlan_dev = skb->dev;
-	struct sfe_l2_info l2_info_temp;
-	l2_info_temp.vlan_hdr_cnt = 0;
-
-	/*
-	 * Vlan tag would be present for ports where VLAN filtering is enabled.
-	 * Read the vlan tag from skb header vlan field.
-	 */
-	if (skb_vlan_tag_present(skb)) {
-		l2_info_temp.vlan_hdr[l2_info_temp.vlan_hdr_cnt].tci = skb_vlan_tag_get(skb);
-		l2_info_temp.vlan_hdr[l2_info_temp.vlan_hdr_cnt].tpid = skb->vlan_proto;
-		l2_info_temp.vlan_hdr_cnt++;
-		__vlan_hwaccel_clear_tag(skb);
-		sfe_l2_parse_flag_set(l2_info, SFE_L2_PARSE_FLAGS_VLAN_HW_TAG_SET);
-	}
-
-	/*
-	 * VLAN processing is done by linux and hence skb->dev is updated to
-	 * corresponding vlan dev, so extract the vlan info from vlan dev.
-	 */
-	while (is_vlan_dev(vlan_dev)) {
-		if (unlikely(l2_info_temp.vlan_hdr_cnt > SFE_MAX_VLAN_DEPTH)) {
-			if ((sfe_l2_parse_flag_check(l2_info, SFE_L2_PARSE_FLAGS_VLAN_HW_TAG_SET))) {
-				skb->vlan_present = 1;
-			}
-			return false;
-		}
-
-		l2_info_temp.vlan_hdr[l2_info_temp.vlan_hdr_cnt].tci = vlan_dev_vlan_id(vlan_dev);
-		l2_info_temp.vlan_hdr[l2_info_temp.vlan_hdr_cnt].tpid = vlan_dev_vlan_proto(vlan_dev);
-		l2_info_temp.vlan_hdr_cnt++;
-		vlan_dev = vlan_dev_next_dev(vlan_dev);
-	}
-
-	while ((l2_info_temp.vlan_hdr_cnt > 0) && l2_info->vlan_hdr_cnt < SFE_MAX_VLAN_DEPTH) {
-		l2_info_temp.vlan_hdr_cnt--;
-		l2_info->vlan_hdr[l2_info->vlan_hdr_cnt].tci = l2_info_temp.vlan_hdr[l2_info_temp.vlan_hdr_cnt].tci;
-		l2_info->vlan_hdr[l2_info->vlan_hdr_cnt].tpid = l2_info_temp.vlan_hdr[l2_info_temp.vlan_hdr_cnt].tpid;
-		l2_info->vlan_hdr_cnt++;
-		sfe_l2_parse_flag_set(l2_info, SFE_L2_PARSE_FLAGS_VLAN_LINUX_UNTAGGED);
-	}
-
-	l2_info->protocol = htons(skb->protocol);
-	return true;
-}
-
 /*
  * sfe_vlan_validate_ingress_tag()
  * 	Validates ingress packet VLAN tag.

--- a/src/cache.c
+++ b/src/cache.c
@@ -1862,6 +1862,20 @@ char *record_source(unsigned int index)
   return "<unknown>";
 }
 
+/* patch: function returns integer 1 if query type is unknown. */
+/* known types are defined in cache.c:typestr:36. */
+int is_query_type_unknown(unsigned short type)
+{
+  unsigned int i;
+  for (i = 0; i < (sizeof(typestr)/sizeof(typestr[0])); i++)
+    if (typestr[i].type == type) 
+      {
+	return 0;
+      }
+  return 1;
+}
+/* end of patch */
+
 static char *querystr(char *desc, unsigned short type)
 {
   unsigned int i;
--- a/src/dns-protocol.h
+++ b/src/dns-protocol.h
@@ -71,6 +71,8 @@
 #define T_NSEC          47
 #define T_DNSKEY        48
 #define T_NSEC3         50
+#define T_HTTPS         65
+#define T_UNKNOWN       66
 #define	T_TKEY		249		
 #define	T_TSIG		250
 #define T_AXFR          252
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -279,7 +279,9 @@ struct event_desc {
 #define OPT_FILTER_AAAA    68
 #define OPT_STRIP_ECS      69
 #define OPT_STRIP_MAC      70
-#define OPT_LAST           71
+#define OPT_FILTER_HTTPS   71
+#define OPT_FILTER_UNKNOWN 72
+#define OPT_LAST           73
 
 #define OPTION_BITS (sizeof(unsigned int)*8)
 #define OPTION_SIZE ( (OPT_LAST/OPTION_BITS)+((OPT_LAST%OPTION_BITS)!=0) )
@@ -1280,6 +1282,10 @@ void cache_init(void);
 void next_uid(struct crec *crecp);
 void log_query(unsigned int flags, char *name, union all_addr *addr, char *arg, unsigned short type); 
 char *record_source(unsigned int index);
+/* patch: function returns integer 1 if query type is unknown */
+/* known types are defined in cache.c:typestr:36. */
+int is_query_type_unknown(unsigned short type);
+/* end of patch */
 int cache_find_non_terminal(char *name, time_t now);
 struct crec *cache_find_by_addr(struct crec *crecp,
 				union all_addr *addr, time_t now, 
--- a/src/option.c
+++ b/src/option.c
@@ -182,6 +182,8 @@ struct myoption {
 #define LOPT_CONF_OPT      373
 #define LOPT_CONF_SCRIPT   374
 #define LOPT_MINTTL        375
+#define LOPT_FILTER_HTTPS  371
+#define LOPT_FILTER_UNKNOWN 372
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -368,6 +370,8 @@ static const struct myoption opts[] =
     { "log-debug", 0, 0, LOPT_LOG_DEBUG },
     { "umbrella", 2, 0, LOPT_UMBRELLA },
     { "quiet-tftp", 0, 0, LOPT_QUIET_TFTP },
+    { "filter-https", 0, 0, LOPT_FILTER_HTTPS },
+    { "filter-unknown", 0, 0, LOPT_FILTER_UNKNOWN },
     { NULL, 0, 0, 0 }
   };
 
@@ -561,6 +565,8 @@ static struct {
   { LOPT_SCRIPT_TIME, OPT_LEASE_RENEW, NULL, gettext_noop("Call dhcp-script when lease expiry changes."), NULL },
   { LOPT_UMBRELLA, ARG_ONE, "[=<optspec>]", gettext_noop("Send Cisco Umbrella identifiers including remote IP."), NULL },
   { LOPT_QUIET_TFTP, OPT_QUIET_TFTP, NULL, gettext_noop("Do not log routine TFTP."), NULL },
+  { LOPT_FILTER_HTTPS, OPT_FILTER_HTTPS, NULL, gettext_noop("Filter all HTTPS/query type 65 requests."), NULL },
+  { LOPT_FILTER_UNKNOWN, OPT_FILTER_UNKNOWN, NULL, gettext_noop("Filter all unknown query types (known are defined in cache.c)."), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
 
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -2111,6 +2111,29 @@ size_t answer_request(struct dns_header *header, char *limit, size_t qlen,
 	    }
 	}
 
+      /* end of patch */
+      /* patch to filter https/query type 65 forwards */
+      if (qtype == T_HTTPS && option_bool(OPT_FILTER_HTTPS))
+        {
+          /* return a null reply */
+          ans = 1;
+          if (!dryrun)
+            log_query(F_CONFIG | F_IPV4 | F_NEG, name, &addr, NULL, 0);
+          break;
+        }
+      /* end of patch */
+      /* patch to filter all unknown query types */
+      /* known types are defined in cache.c:typestr:36. */
+      if (is_query_type_unknown(qtype) && option_bool(OPT_FILTER_UNKNOWN))
+        {
+          /* return a null reply */
+          ans = 1;
+          if (!dryrun)
+            log_query(F_CONFIG | F_NEG, name, NULL, NULL, 0);
+          break;
+        }
+      /* end of patch */
+
       if (!ans)
 	return 0; /* failed to answer a question */
     }

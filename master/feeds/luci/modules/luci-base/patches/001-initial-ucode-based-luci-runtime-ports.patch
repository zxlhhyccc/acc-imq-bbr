--- a/root/usr/share/rpcd/ucode/luci
+++ b/root/usr/share/rpcd/ucode/luci
@@ -4,6 +4,7 @@
 'use strict';
 
 import { stdin, access, dirname, basename, open, popen, glob, lsdir, readfile, readlink, error } from 'fs';
+import { connect } from 'ubus';
 import { cursor } from 'uci';
 
 import { init_list, init_index, init_enabled, init_action, conntrack_list, process_list } from 'luci.sys';
@@ -76,6 +77,7 @@ const methods = {
 		call: function(request) {
 			switch (request.args.action) {
 			case 'enable':
+			case 'enabled':
 			case 'disable':
 			case 'start':
 			case 'stop':
@@ -227,6 +229,7 @@ const methods = {
 				bonding:    access('/sys/module/bonding'),
 				mii_tool:   access('/usr/sbin/mii-tool'),
 				offloading: access('/sys/module/xt_FLOWOFFLOAD/refcnt') == true || access('/sys/module/nft_flow_offload/refcnt') == true,
+				fullcone:   access('/sys/module/xt_FULLCONENAT/refcnt') == true || access('/sys/module/nft_fullcone/refcnt') == true,
 				br2684ctl:  access('/usr/sbin/br2684ctl') == true,
 				swconfig:   access('/sbin/swconfig') == true,
 				zram:       access('/sys/class/zram-control') == true,
@@ -597,44 +600,121 @@ const methods = {
 
 	getBuiltinEthernetPorts: {
 		call: function() {
-			let fd = open('/etc/board.json', 'r');
-			let board = fd ? json(fd) : {};
+			const ubus = connect();
+			const sysboard = ubus.call('system', 'board');
 			let ports = [];
 
-			for (let k in [ 'lan', 'wan' ]) {
-				if (!board?.network?.[k])
-					continue;
+			if (
+				(type(sysboard) !== 'object') ||
+				match(sysboard.release.target, /^(armsr|bcm27xx|mvebu|rockchip|sifiveu|sunxi|x86)/)
+			) {
+				const stat = ubus.call('network.device', 'status') || {};
+				map(keys(stat), (ifname) => {
+					if (
+						ifname &&
+						stat[ifname]?.devtype in ['ethernet', 'dsa'] && (
+							length(stat[ifname]['link-advertising']) ||
+							match(ifname, /^eth\d+$/)
+						)
+					)
+						push(ports, { role: 'unknown', device: ifname });
+				});
+			} else {
+				const fd = open('/etc/board.json', 'r');
+				const board = fd ? json(fd) : {};
+				for (let k in [ 'lan', 'wan' ]) {
+					if (!board?.network?.[k])
+						continue;
 
-				if (type(board.network[k].ports) == 'array') {
-					for (let ifname in board.network[k].ports) {
-						push(ports, { role: k, device: ifname });
+					if (type(board.network[k].ports) == 'array') {
+						for (let ifname in board.network[k].ports)
+							push(ports, { role: k, device: ifname });
+					} else if (type(board.network[k].device) == 'string') {
+						push(ports, { role: k, device: board.network[k].device });
 					}
 				}
-				else if (type(board.network[k].device) == 'string') {
-					push(ports, { role: k, device: board.network[k].device });
-				}
 			}
 
-			/* Workaround for targets that do not enumerate  all netdevs in board.json */
-			if (uname().machine in [ 'x86_64' ] &&
-			    match(ports[0]?.device, /^eth\d+$/)) {
-				let bus = readlink(`/sys/class/net/${ports[0].device}/device/subsystem`);
+			return { result: ports };
+		}
+	},
 
-				for (let netdev in lsdir('/sys/class/net')) {
-					if (!match(netdev, /^eth\d+$/))
-						continue;
+	getCPUBench: {
+		call: function() {
+			return { cpubench: readfile('/etc/bench.log') || '' };
+		}
+	},
 
-					if (length(filter(ports, port => port.device == netdev)))
-						continue;
+	getCPUInfo: {
+		call: function() {
+			if (!access('/sbin/cpuinfo'))
+				return {};
 
-					if (readlink(`/sys/class/net/${netdev}/device/subsystem`) != bus)
-						continue;
+			const fd = popen('/sbin/cpuinfo');
+			if (fd) {
+				let cpuinfo = fd.read('all');
+				if (!cpuinfo)
+					cpuinfo = '?';
+				fd.close();
 
-					push(ports, { role: 'unknown', device: netdev });
-				}
+				return { cpuinfo: cpuinfo };
+			} else {
+				return { cpuinfo: error() };
 			}
+		}
+	},
 
-			return { result: ports };
+	getCPUUsage: {
+		call: function() {
+			const fd = popen('top -n1 | awk \'/^CPU/ {printf("%d%", 100 - $8)}\'');
+			if (fd) {
+				let cpuusage = fd.read('all');
+				if (!cpuusage)
+					cpuusage = '?';
+				fd.close();
+
+				return { cpuusage: cpuusage };
+			} else {
+				return { cpuusage: error() };
+			}
+		}
+	},
+
+	getTempInfo: {
+		call: function() {
+			if (!access('/sbin/tempinfo'))
+				return {};
+
+			const fd = popen('/sbin/tempinfo');
+			if (fd) {
+				let tempinfo = fd.read('all');
+				if (!tempinfo)
+					tempinfo = '?';
+				fd.close();
+
+				return { tempinfo: tempinfo };
+			} else {
+				return { tempinfo: error() };
+			}
+		}
+	},
+
+	getOnlineUsers: {
+		call: function() {
+			const fd = open('/proc/net/arp', 'r');
+			if (fd) {
+				let onlineusers = 0;
+
+				for (let line = fd.read('line'); length(line); line = fd.read('line'))
+					if (match(trim(line), /^.*(0x2).*(br-lan)$/))
+						onlineusers++;
+
+				fd.close();
+
+				return { onlineusers: onlineusers };
+			} else {
+				return { onlineusers: error() };
+			}
 		}
 	},
 

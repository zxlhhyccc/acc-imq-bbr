--- a/root/usr/share/rpcd/ucode/luci
+++ b/root/usr/share/rpcd/ucode/luci
@@ -8,7 +8,7 @@ import { cursor } from 'uci';
 
 import { init_list, init_index, init_enabled, init_action, conntrack_list, process_list } from 'luci.sys';
 import { revision, branch } from 'luci.version';
-import { statvfs, uname } from 'luci.core';
+import { statvfs } from 'luci.core';
 
 import timezones from 'luci.zoneinfo';
 
@@ -48,6 +48,7 @@ const methods = {
 		call: function(request) {
 			switch (request.args.action) {
 			case 'enable':
+			case 'enabled':
 			case 'disable':
 			case 'start':
 			case 'stop':
@@ -197,6 +198,7 @@ const methods = {
 				firewall4:  access('/sbin/fw4') == true,
 				opkg:       access('/bin/opkg') == true,
 				offloading: access('/sys/module/xt_FLOWOFFLOAD/refcnt') == true || access('/sys/module/nft_flow_offload/refcnt') == true,
+				fullcone:   access('/sys/module/xt_FULLCONENAT/refcnt') == true || access('/sys/module/nft_fullcone/refcnt') == true,
 				br2684ctl:  access('/usr/sbin/br2684ctl') == true,
 				swconfig:   access('/sbin/swconfig') == true,
 				odhcpd:     access('/usr/sbin/odhcpd') == true,
@@ -540,46 +542,102 @@ const methods = {
 		}
 	},
 
-	getBuiltinEthernetPorts: {
+	getCPUBench: {
 		call: function() {
-			let fd = open('/etc/board.json', 'r');
-			let board = fd ? json(fd) : {};
-			let ports = [];
+			return { cpubench: readfile('/etc/bench.log') || '' };
+		}
+	},
 
-			for (let k in [ 'lan', 'wan' ]) {
-				if (!board?.network?.[k])
-					continue;
+	getCPUInfo: {
+		call: function() {
+			if (!access('/sbin/cpuinfo'))
+				return {};
 
-				if (type(board.network[k].ports) == 'array') {
-					for (let ifname in board.network[k].ports) {
-						push(ports, { role: k, device: ifname });
-					}
-				}
-				else if (type(board.network[k].device) == 'string') {
-					push(ports, { role: k, device: board.network[k].device });
-				}
+			const fd = popen('/sbin/cpuinfo');
+			if (fd) {
+				let cpuinfo = fd.read('all');
+				if (!cpuinfo)
+					cpuinfo = '?';
+				fd.close();
+
+				return { cpuinfo: cpuinfo };
+			} else {
+				return { cpuinfo: error() };
 			}
+		}
+	},
 
-			/* Workaround for targets that do not enumerate  all netdevs in board.json */
-			if (uname().machine in [ 'x86_64' ] &&
-			    match(ports[0]?.device, /^eth\d+$/)) {
-				let bus = readlink(`/sys/class/net/${ports[0].device}/device/subsystem`);
+	getCPUUsage: {
+		call: function() {
+			const fd = popen('top -n1 | awk \'/^CPU/ {printf("%d%", 100 - $8)}\'');
+			if (fd) {
+				let cpuusage = fd.read('all');
+				if (!cpuusage)
+					cpuusage = '?';
+				fd.close();
 
-				for (let netdev in lsdir('/sys/class/net')) {
-					if (!match(netdev, /^eth\d+$/))
-						continue;
+				return { cpuusage: cpuusage };
+			} else {
+				return { cpuusage: error() };
+			}
+		}
+	},
 
-					if (length(filter(ports, port => port.device == netdev)))
-						continue;
+	getETHInfo: {
+		call: function() {
+			if (!access('/sbin/ethinfo'))
+				return {};
 
-					if (readlink(`/sys/class/net/${netdev}/device/subsystem`) != bus)
-						continue;
+			const fd = popen('/sbin/ethinfo');
+			if (fd) {
+				let ethinfo = fd.read('all');
+				if (!ethinfo)
+					ethinfo = '{}';
+				ethinfo = json(ethinfo);
+				fd.close();
 
-					push(ports, { role: 'unknown', device: netdev });
-				}
+				return { ethinfo: ethinfo };
+			} else {
+				return { ethinfo: error() };
 			}
+		}
+	},
+
+	getTempInfo: {
+		call: function() {
+			if (!access('/sbin/tempinfo'))
+				return {};
 
-			return { result: ports };
+			const fd = popen('/sbin/tempinfo');
+			if (fd) {
+				let tempinfo = fd.read('all');
+				if (!tempinfo)
+					tempinfo = '?';
+				fd.close();
+
+				return { tempinfo: tempinfo };
+			} else {
+				return { tempinfo: error() };
+			}
+		}
+	},
+
+	getOnlineUsers: {
+		call: function() {
+			const fd = open('/proc/net/arp', 'r');
+			if (fd) {
+				let onlineusers = 0;
+
+				for (let line = fd.read('line'); length(line); line = fd.read('line'))
+					if (match(trim(line), /^.*(0x2).*(br-lan)$/))
+						onlineusers++;
+
+				fd.close();
+
+				return { onlineusers: onlineusers };
+			} else {
+				return { onlineusers: error() };
+			}
 		}
 	}
 };

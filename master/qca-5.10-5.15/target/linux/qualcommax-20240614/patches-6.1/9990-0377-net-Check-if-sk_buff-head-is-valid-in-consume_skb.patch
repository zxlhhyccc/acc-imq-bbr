From 7913da3088d10013c5e447547cc247b4d126ed73 Mon Sep 17 00:00:00 2001
From: Vivek Nataraja <nataraja@codeaurora.org>
Date: Mon, 29 Jun 2015 11:31:50 +0530
Subject: [PATCH] net: Check if sk_buff head is valid in consume_skb()

Commit (0ebd0ac net: add function to allocate sk_buff head
without data area) changes skb_release_all() to check if the
skb has a data area to allow the skb destructor to clear the
data pointer in case only a head has been allocated.

This was later fixed to check skb->head instead of skb->data
in 'commit 5e71d9d77c07 ("net: fix sk_buff head without data area")'.
as skb->head points to the beginning of the data area.

Since, this was done only in kfree_skb path and not in consume_skb
path, this leads to kernel panic in some cases.

Also, since skb_shared_info is not initialized in such skbs,
accessing that in skb_recycler_consume() leads to kernel panic.

Fix this by checking if skb->head is valid in both the cases.

Change-Id: Iad9fcbaa91f5f1d1b8b00b88ae279b52db385f0c
Signed-off-by: Vivek Nataraja <nataraja@codeaurora.org>
Signed-off-by: Casey Chen <kexinc@codeaurora.org>
---
 net/core/skbuff.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -1131,7 +1131,7 @@ void consume_skb(struct sk_buff *skb)
 	 * for us to recycle this one later than to allocate a new one
 	 * from scratch.
 	 */
-	if (likely(skb_recycler_consume(skb)))
+	if (likely(skb->head) && likely(skb_recycler_consume(skb)))
 		return;
 
 	trace_consume_skb(skb);
@@ -1140,7 +1140,9 @@ void consume_skb(struct sk_buff *skb)
 	 * have done in __kfree_skb (above and beyond the skb_release_head_state
 	 * that we already did).
 	 */
-	skb_release_data(skb);
+	if (likely(skb->head))
+		skb_release_data(skb);
+
 	kfree_skbmem(skb);
 }
 EXPORT_SYMBOL(consume_skb);

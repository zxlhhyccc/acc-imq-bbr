From cd9333020eac302df781f2e7dd715cd9b10aff0a Mon Sep 17 00:00:00 2001
From: Swati Singh <quic_swasing@quicinc.com>
Date: Tue, 22 Aug 2023 17:39:12 +0530
Subject: [PATCH] net: Fix kernel option check to enable skb recycler code

Use CONFIG_SKB_RECYCLER instead of CONFIG_TRACEPOINTS.

Change-Id: Iad2d11ec90a305f8b170a15c7addb4d3e031adc3
Signed-off-by: Swati Singh <quic_swasing@quicinc.com>
---
 include/linux/skbuff.h | 2 +-
 net/core/skbuff.c      | 5 ++---
 2 files changed, 3 insertions(+), 4 deletions(-)

--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -1251,7 +1251,7 @@ static inline void kfree_skb_list(struct
 	kfree_skb_list_reason(segs, SKB_DROP_REASON_NOT_SPECIFIED);
 }
 
-#ifdef CONFIG_TRACEPOINTS
+#ifdef CONFIG_SKB_RECYCLER
 void consume_skb(struct sk_buff *skb);
 #else
 static inline void consume_skb(struct sk_buff *skb)
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -1099,7 +1099,6 @@ void skb_tx_error(struct sk_buff *skb)
 }
 EXPORT_SYMBOL(skb_tx_error);
 
-#ifdef CONFIG_TRACEPOINTS
 /**
  *	consume_skb - free an skbuff
  *	@skb: buffer to free
@@ -1140,8 +1139,9 @@ void consume_skb(struct sk_buff *skb)
 	if (likely(skb->head) && likely(skb_recycler_consume(skb)))
 		return;
 
+#ifdef CONFIG_TRACEPOINTS
 	trace_consume_skb(skb);
-
+#endif
 	/* We're not recycling so now we need to do the rest of what we would
 	 * have done in __kfree_skb (above and beyond the skb_release_head_state
 	 * that we already did).
@@ -1152,7 +1152,6 @@ void consume_skb(struct sk_buff *skb)
 	kfree_skbmem(skb);
 }
 EXPORT_SYMBOL(consume_skb);
-#endif
 
 /**
  *	__consume_stateless_skb - free an skbuff, assuming it is stateless
